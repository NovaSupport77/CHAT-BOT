# --- Configuration & Imports ---
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from pyrogram.enums import ChatMemberStatus
import random
import time
import asyncio
import re

# --- REPLACE WITH YOUR ACTUAL DETAILS ---
API_ID = 1234567 
API_HASH = "YOUR_API_HASH" 
BOT_TOKEN = "YOUR_BOT_TOKEN" 

# Bot Owner Details 
OWNER_ID = 7589623332
OWNER_USERNAME = "TheXVoren"
OWNER_MENTION_LINK = f"[V·¥è Ä·¥á…¥](https://t.me/{OWNER_USERNAME})"

# Support & Update Channels
SUPPORT_CHAT_URL = "https://t.me/Evara_Support_Chat"
UPDATES_CHANNEL_URL = "https://t.me/Evara_Updates"

# Image URLs
START_IMG = "https://iili.io/KVzgS44.jpg"
PING_IMG = "https://iili.io/KVzbu4t.jpg"
DEVLOPER_IMG = "https://iili.io/KVzmgWl.jpg"

# --- Client Initialization ---
app = Client(
    "advanced_bot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

# Global variables for state management
start_uptime = time.time() # Bot start time for uptime calculation
AFK_USERS = {} # {user_id: afk_start_time, ...}
TAGGING_STATE = {} # {chat_id: True/False} for tagall
# PLACEHOLDER for database content - Used for /stats command
GLOBAL_STATS = {
    "groups": 150,
    "users": 25000,
    "chats_enabled": 100
}

# --- Utility Functions ---

# 1. Check if the bot is an admin in the group
async def is_bot_admin(chat_id):
    try:
        member = await app.get_chat_member(chat_id, app.me.id)
        return member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]
    except Exception:
        return False

# 2. Check if a user is admin/owner
async def is_admin_or_owner(chat_id, user_id):
    try:
        member = await app.get_chat_member(chat_id, user_id)
        return member.status in [ChatMemberStatus.OWNER, ChatMemberStatus.ADMINISTRATOR]
    except Exception:
        return False

# 3. Restrict command to only work if bot is admin
def bot_admin_restrict(func):
    async def wrapper(client, message):
        if message.chat.type != ChatMemberStatus.PRIVATE and not await is_bot_admin(message.chat.id):
            return await message.reply("**‚ö†Ô∏è …™ ·¥Ä·¥ç …¥·¥è·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥  ú·¥á Ä·¥á!** ·¥ò ü·¥á·¥Äs·¥á ·¥ç·¥Ä·¥ã·¥á ·¥ç·¥á ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥°·¥è Ä·¥ã.")
        await func(client, message)
    return wrapper

# 4. Restrict command to Owner only
def owner_only_restrict(func):
    async def wrapper(client, message):
        if message.from_user.id != OWNER_ID:
            return await message.reply("**üö® ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s ·¥è…¥ ü è “ì·¥è Ä ·¥ç è ·¥è·¥°…¥·¥á Ä!**")
        await func(client, message)
    return wrapper

# --- Callback Data Constants ---
HOME_CMD = "home_menu"
ABOUT_CMD = "about_menu"
HELP_CMD = "help_menu"
HELP_COUPLE = "help_couples"
HELP_CHATBOT = "help_chatbot"
HELP_TOOLS = "help_tools"
HELP_GAMES = "help_games"
HELP_GROUPS = "help_groups" 
CLOSE_CMD = "close_menu"

# --- Keyboard Markup Definitions ---

# 1. Main Start/Home Keyboard
def home_keyboard(user_id):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton(text="+ ùêÄ·¥Ö·¥Ö ·¥ç·¥á  è·¥è·¥ú Ä ùêÜ Ä·¥è·¥ú·¥ò +", url=f"https://t.me/{app.me.username}?startgroup=true")
        ],
        [
            InlineKeyboardButton(text="·Øì‚ùç·¥°ùõà·¥á Ä", user_id=user_id),
            InlineKeyboardButton(text="‚óâ ùêÄ ô·¥è·¥ú·¥õ", callback_data=ABOUT_CMD)
        ],
        [
            InlineKeyboardButton(text="‚óâ ùêá·¥á ü·¥ò & ùêÇ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", callback_data=HELP_CMD)
        ]
    ])

# 2. About Keyboard
def about_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton(text="ùêÑ·¥†·¥Ä Ä·¥Ä ùêí·¥ú·¥ò·¥ò·¥è Ä·¥õ ùêÇ ú·¥Ä·¥õ", url=SUPPORT_CHAT_URL),
            InlineKeyboardButton(text="ùêîœÅ‚àÇ·¥Ä·¥õ·¥ás", url=UPDATES_CHANNEL_URL)
        ],
        [
            InlineKeyboardButton(text="ùêÅ·¥Ä·¥Ñ·¥ã", callback_data=HOME_CMD),
            InlineKeyboardButton(text="ùêÇ ü·¥ès·¥á", callback_data=CLOSE_CMD)
        ]
    ])

# 3. Help Main Keyboard (2 Rows, 3 Columns)
def help_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton(text="·¥Ñ·¥è·¥ú·¥ò ü·¥á", callback_data=HELP_COUPLE),
            InlineKeyboardButton(text="·¥õ·¥è·¥è üs", callback_data=HELP_TOOLS),
            InlineKeyboardButton(text="s·¥õ…™·¥Ñ·¥ã·¥á Äs", callback_data=HELP_GROUPS)
        ],
        [
            InlineKeyboardButton(text="·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ", callback_data=HELP_CHATBOT),
            InlineKeyboardButton(text="…¢·¥Ä·¥ç·¥ás", callback_data=HELP_GAMES),
            InlineKeyboardButton(text="…¢ Ä·¥è·¥ú·¥òs", callback_data=HELP_GROUPS)
        ],
        [
            InlineKeyboardButton(text="ùêÅ·¥Ä·¥Ñ·¥ã", callback_data=HOME_CMD),
            InlineKeyboardButton(text="ùêÇ ü·¥ès·¥á", callback_data=CLOSE_CMD)
        ]
    ])

# 4. Help Sub-Menu Keyboard (Common layout)
def sub_help_keyboard(back_to_menu):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton(text="ùêÅ·¥Ä·¥Ñ·¥ã", callback_data=back_to_menu),
            InlineKeyboardButton(text="ùêÇ ü·¥ès·¥á", callback_data=CLOSE_CMD)
        ]
    ])

# 5. Love/Cute Command Support Button
def support_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url=SUPPORT_CHAT_URL)
        ]
    ])

# 6. Ping Command Keyboard
def ping_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton(text="+ ·¥Ä·¥Ö·¥Ö ·¥ç·¥á +", url=f"https://t.me/{app.me.username}?startgroup=true")
        ],
        [
            InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url=SUPPORT_CHAT_URL)
        ]
    ])

# 7. Devloper Command Keyboard
def devloper_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton(text="ùêÉ·¥á·¥† ü·¥è·¥ò·¥á Ä ·É¶", user_id=OWNER_ID)
        ]
    ])

# --- Text Definitions ---

# Start/Home Text
def get_start_text(user_mention):
    return (
        f" ú—î è {user_mention}\n"
        f"**‚ú¶ …™ ·¥ßœª ·¥ß·¥Ö·¥†·¥ßŒ∑·¥Ñ—î·¥Ö ·¥Ñ ú·¥ß·¥õ  ôœÉ·¥õ ·¥°…™·¥õ ú sœÉœª—î “ì—î·¥ß·¥õ·¥ú Ä—îs. ‚ú¶**\n"
        "‚ú¶  Ä—î·¥ò ü è …™Œ∑ …¢ ÄœÉ·¥ú·¥òs & ·¥ò Ä…™·¥†·¥ß·¥õ—îü•Ä\n"
        "‚ú¶ Œ∑·¥è ·¥ß ô·¥ús…™Œ∑…¢ & z—î ÄœÉ ·¥ÖœÉ·¥°Œ∑·¥õ…™œª—î\n"
        "‚ú¶ ·¥Ñ ü…™·¥Ñ·¥ã  ú—î ü·¥ò  ô·¥ú·¥õ·¥õœÉŒ∑ “ìœÉ Ä  ú—î ü·¥òs‚ù§Ô∏è\n"
        f"‚ùñ œª·¥ß·¥Ö—î  ô è...{OWNER_MENTION_LINK}"
    )

# About Text
ABOUT_TEXT = (
    "‚ùñ ·¥ß œª…™Œ∑…™ ·¥Ñ ú·¥ß·¥õ  ô·¥è·¥õ “ì·¥è Ä ·¥õ·¥á ü·¥á…¢ Ä·¥ßœª …¢ Ä·¥è·¥ú·¥òs & ·¥ò Ä…™·¥†·¥ß·¥õ·¥á\n"
    "‚óè ·¥° Ä…™·¥õ·¥õ—îŒ∑ …™Œ∑ ·¥ò è·¥õ ú·¥è…¥**\n"
    "‚óè ·¥ã—î—î·¥ò  èœÉ·¥ú Ä ·¥ß·¥Ñ·¥õ…™·¥†—î …¢ ÄœÉ·¥ú·¥ò.\n"
    "‚óè ·¥ß·¥Ö·¥Ö œª—î Œ∑·¥è·¥°  ô·¥ß ô è …™…¥  è·¥è·¥ú Ä …¢ ÄœÉ·¥ú·¥òs."
)

# Help Sub-Menu Texts
HELP_COUPLE_TEXT = (
    "**/Couples** `~ ·¥Ñ ú·¥è·¥ès·¥á ·¥Ä  Ä·¥Ä…¥·¥Ö·¥è·¥ç ·¥Ñ·¥è·¥ú·¥ò ü·¥á`\n"
    "**/cute** `~ ·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä ·¥Ñ·¥ú·¥õ·¥á…¥·¥áss`\n"
    "**/love** `~ …¢…™·¥†·¥á ·¥õ·¥°·¥è …¥·¥Ä·¥ç·¥ás ·¥°…™·¥õ ú ·¥õ ú…™s “ì·¥è Ä·¥ç·¥Ä·¥õ: (Name1) + (Name2) ·¥õ ú·¥á…¥ s·¥á·¥á  ü·¥è·¥†·¥á ·¥ò·¥èss…™ ô…™ ü…™·¥õ è`"
)

HELP_CHATBOT_TEXT = (
    "**/chatbot** `<enable/disable>` `~ ·¥á…¥·¥Ä ô ü·¥á/·¥Ö…™s·¥Ä ô ü·¥á ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ`\n\n"
    "**…¥·¥è·¥õ·¥á : ·¥è…¥ ü è ·¥°·¥è Ä·¥ã …™…¥ …¢ Ä·¥è·¥ú·¥ò !! (Admin/Owner Only)**"
)

HELP_TOOLS_TEXT = (
    "**/id** `~ …¢·¥á·¥õ ·¥ús·¥á Ä …™·¥Ö (Reply or Tag)`\n"
    "**/tagall** `<text>` `~ ·¥õ·¥Ä…¢ ·¥Ä ü ü ·¥ç·¥á·¥ç ô·¥á Äs ·¥°…™·¥õ ú ·¥õ·¥áx·¥õ (Admin/Owner Only)`\n"
    "**/stop** `~ ·¥õ·¥è s·¥õ·¥è·¥ò ·¥õ·¥Ä…¢…¢…™…¥…¢ (Admin/Owner Only)`\n"
    "**/afk** `~ ·¥Ä·¥°·¥Ä è “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥ã·¥á è ô·¥è·¥Ä Ä·¥Ö`\n"
    "**/stats** `~ s ú·¥è·¥°s  ô·¥è·¥õ …¢ ü·¥è ô·¥Ä ü s·¥õ·¥Ä·¥õs`"
)

HELP_GAMES_TEXT = (
    "**/dice** `~  Ä·¥è ü ü ·¥Ä ·¥Ö…™·¥Ñ·¥á`\n"
    "**/jackpot** `~ ·¥ä·¥Ä·¥Ñ·¥ã·¥ò·¥è·¥õ ·¥ç·¥Ä·¥Ñ ú…™…¥·¥á`\n"
    "**/football** `~ ·¥ò ü·¥Ä è “ì·¥è·¥è·¥õ ô·¥Ä ü ü`\n"
    "**/basketball** `~ ·¥ò ü·¥Ä è  ô·¥Äs·¥ã·¥á·¥õ ô·¥Ä ü ü`"
)

HELP_GROUPS_TEXT = (
    "**/staff** `~ ·¥Ö…™s·¥ò ü·¥Ä ès …¢ Ä·¥è·¥ú·¥ò s·¥õ·¥Ä“ì“ì ·¥ç·¥á·¥ç ô·¥á Äs`\n"
    "**/botlist** `~ ·¥Ñ ú·¥á·¥Ñ·¥ã  ú·¥è·¥° ·¥ç·¥Ä…¥ è  ô·¥è·¥õs …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò (Admin/Owner Only)`\n"
    "**/ping** `~ ·¥Ñ ú·¥á·¥Ñ·¥ã  ô·¥è·¥õ  ü·¥Ä·¥õ·¥á…¥·¥Ñ è ·¥Ä…¥·¥Ö ·¥ú·¥ò·¥õ…™·¥ç·¥á`\n"
    "**Voice Chat Notifications** `~  ô·¥è·¥õ ·¥Ä·¥ú·¥õ·¥è ·¥ò·¥ès·¥õs ·¥†·¥Ñ s·¥õ·¥Ä Ä·¥õ/·¥á…¥·¥Ö …¥·¥è·¥õ…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥s`"
)

DEVLOPER_TEXT = " ô·¥è·¥õ ·¥Ö·¥á·¥† ü·¥è·¥ò·¥á Ä …™s"

# --- Handler: /start command ---

@app.on_message(filters.command("start"))
@bot_admin_restrict
async def start_command(client, message):
    user_mention = message.from_user.mention
    
    await message.reply_photo(
        photo=START_IMG,
        caption=get_start_text(user_mention),
        reply_markup=home_keyboard(message.from_user.id)
    )

# --- Handler: Callbacks (Button Clicks) ---

@app.on_callback_query()
async def callback_handler(client, query):
    data = query.data
    user_mention = query.from_user.mention
    
    # Check if the chat is a group and the bot is not admin (Only for button interactions)
    if query.message.chat.type != ChatMemberStatus.PRIVATE and not await is_bot_admin(query.message.chat.id):
        return await query.answer("‚ö†Ô∏è I'm not an admin here! Please make me admin to work.", show_alert=True)
    
    # Home Menu
    if data == HOME_CMD:
        await query.message.edit_media(
            media=START_IMG,
            caption=get_start_text(user_mention),
            reply_markup=home_keyboard(query.from_user.id)
        )
    
    # About Menu
    elif data == ABOUT_CMD:
        await query.message.edit_caption(
            caption=ABOUT_TEXT,
            reply_markup=about_keyboard()
        )
        
    # Main Help Menu
    elif data == HELP_CMD:
        await query.message.edit_caption(
            caption="**·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥Ä  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è s·¥á·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös:**",
            reply_markup=help_keyboard()
        )

    # Help Sub-Menus
    elif data == HELP_COUPLE:
        await query.message.edit_caption(caption=HELP_COUPLE_TEXT, reply_markup=sub_help_keyboard(HELP_CMD))
    elif data == HELP_CHATBOT:
        await query.message.edit_caption(caption=HELP_CHATBOT_TEXT, reply_markup=sub_help_keyboard(HELP_CMD))
    elif data == HELP_TOOLS:
        await query.message.edit_caption(caption=HELP_TOOLS_TEXT, reply_markup=sub_help_keyboard(HELP_CMD))
    elif data == HELP_GAMES:
        await query.message.edit_caption(caption=HELP_GAMES_TEXT, reply_markup=sub_help_keyboard(HELP_CMD))
    # Using HELP_GROUPS for both GROUPS and the old STICKERS section
    elif data == HELP_GROUPS or data == "help_stickers": 
        await query.message.edit_caption(caption=HELP_GROUPS_TEXT, reply_markup=sub_help_keyboard(HELP_CMD))
        
    elif data == CLOSE_CMD:
        await query.message.delete()
        
    await query.answer()

# --- Handler: /Devloper command ---

@app.on_message(filters.command("Devloper"))
@bot_admin_restrict
async def devloper_command(client, message):
    await message.reply_photo(
        photo=DEVLOPER_IMG,
        caption=DEVLOPER_TEXT,
        reply_markup=devloper_keyboard()
    )

# --- Admin-Only Command: /tagall ---

@app.on_message(filters.command("tagall") & filters.group)
@bot_admin_restrict
async def tag_all_command(client, message):
    if not await is_admin_or_owner(message.chat.id, message.from_user.id):
        return await message.reply("‚ö†Ô∏è **·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥s/·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!**")

    tag_text = message.text.split(maxsplit=1)[1] if len(message.command) > 1 else ""
    
    await message.reply("**ùêì·¥Ä…¢…¢…™…¥…¢ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö !! ‚ô•**")
    
    TAGGING_STATE[message.chat.id] = True
    
    try:
        async for member in client.get_chat_members(message.chat.id):
            if not TAGGING_STATE.get(message.chat.id, False):
                await message.reply("**·¥õ·¥Ä…¢…¢…™…¥…¢ s·¥õ·¥è·¥ò·¥á·¥Ö !!**")
                return

            if member.user.is_bot:
                continue

            # Tagging Logic
            await app.send_message(
                message.chat.id,
                f"[{member.user.first_name}](tg://user?id={member.user.id}) {tag_text}",
                disable_web_page_preview=True
            )
            await asyncio.sleep(1) # Delay to avoid flood limits
        
        await message.reply("**·¥õ·¥Ä…¢…¢…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö !! ‚óâ‚Äø‚óâ**")
    except Exception as e:
        print(f"Tagall Error: {e}")
    finally:
        TAGGING_STATE[message.chat.id] = False

# --- Admin-Only Command: /stop ---

@app.on_message(filters.command("stop") & filters.group)
@bot_admin_restrict
async def stop_tagging_command(client, message):
    if not await is_admin_or_owner(message.chat.id, message.from_user.id):
        return await message.reply("‚ö†Ô∏è **·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥s/·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!**")
    
    if TAGGING_STATE.get(message.chat.id, False):
        TAGGING_STATE[message.chat.id] = False
        await message.reply("**·¥õ·¥Ä…¢…¢…™…¥…¢ s·¥õ·¥è·¥ò·¥á·¥Ö !!**")
    else:
        await message.reply("…¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥õ·¥Ä…¢…¢…™…¥…¢ ·¥ò Ä·¥è·¥Ñ·¥áss ·¥õ·¥è s·¥õ·¥è·¥ò.")

# --- Admin-Only Command: /chatbot ---
# Placeholder: Requires DB for persistence

@app.on_message(filters.command("chatbot") & filters.group)
@bot_admin_restrict
async def chatbot_toggle(client, message):
    if not await is_admin_or_owner(message.chat.id, message.from_user.id):
        return await message.reply("‚ö†Ô∏è **·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥s/·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!**")

    if len(message.command) < 2:
        return await message.reply("·¥ò ü·¥á·¥Äs·¥á s·¥ò·¥á·¥Ñ…™“ì è `enable` ·¥è Ä `disable`.")

    status = message.command[1].lower()
    
    if status == "enable":
        # Logic to enable chatbot in database
        await message.reply("**·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ s·¥õ·¥Ä·¥õ·¥ús …™s ·¥á…¥·¥Ä ô ü·¥á ‚ú∞**")
    elif status == "disable":
        # Logic to disable chatbot in database
        await message.reply("**·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ s·¥õ·¥Ä·¥õ·¥ús …™s ·¥Ö…™s·¥Ä ô ü·¥á ‚ú∞**")
    else:
        await message.reply("…™…¥·¥†·¥Ä ü…™·¥Ö ·¥è·¥ò·¥õ…™·¥è…¥. ·¥ús·¥á `enable` ·¥è Ä `disable`.")

# --- Admin-Only Command: /botlist ---

@app.on_message(filters.command("botlist") & filters.group)
@bot_admin_restrict
async def bot_list_command(client, message):
    if not await is_admin_or_owner(message.chat.id, message.from_user.id):
        return await message.reply("‚ö†Ô∏è **·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥s/·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!**")

    bots = []
    async for member in client.get_chat_members(message.chat.id):
        if member.user.is_bot and member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
            bots.append(member.user.mention)
    
    if bots:
        bot_list_text = "ü§ñ **·¥Ä·¥Ö·¥ç…™…¥  ô·¥è·¥õs …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò:**\n" + "\n".join(bots)
    else:
        bot_list_text = "…¥·¥è ·¥Ä·¥Ö·¥ç…™…¥  ô·¥è·¥õs “ì·¥è·¥ú…¥·¥Ö …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò."
        
    await message.reply(bot_list_text)

# --- Owner-Only Command: /broadcast ---

@app.on_message(filters.command("broadcast") & filters.private) # Broadcast is typically initiated from private chat
@owner_only_restrict
async def broadcast_command(client, message):
    if len(message.command) < 2:
        return await message.reply("**‚ö†Ô∏è ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ.**")
    
    # Placeholder: Replace this with logic to get all chat IDs from your database
    broadcast_msg = message.text.split(maxsplit=1)[1]
    
    # Simulate list of chats from database. In a real bot, this would be fetched from DB.
    chat_ids_to_broadcast = [] 
    
    success_count = 0
    failed_count = 0
    
    # Simulate a broadcst process
    await message.reply(f"**üì¢  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥õ·¥è {len(chat_ids_to_broadcast)} ·¥Ñ ú·¥Ä·¥õs...**")
    
    # In a real scenario, the bot would iterate over `chat_ids_to_broadcast`
    for chat_id in chat_ids_to_broadcast:
        try:
            await app.send_message(chat_id, broadcast_msg)
            success_count += 1
        except Exception:
            failed_count += 1
            await asyncio.sleep(0.1) # Small delay for flood control
            
    await message.reply(
        f"**‚úÖ  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö!**\n"
        f"**s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü:** `{success_count}`\n"
        f"**“ì·¥Ä…™ ü·¥á·¥Ö:** `{failed_count}`"
    )


# --- General Commands ---

# /stats
@app.on_message(filters.command("stats"))
@bot_admin_restrict
async def bot_stats_command(client, message):
    # This uses the global placeholder. In a real bot, this data would be fetched from the database.
    total_groups = GLOBAL_STATS['groups']
    total_users = GLOBAL_STATS['users']
    chats_enabled = GLOBAL_STATS['chats_enabled']
    
    uptime_seconds = int(time.time() - start_uptime)
    days = uptime_seconds // (24 * 3600)
    hours = (uptime_seconds % (24 * 3600)) // 3600
    minutes = (uptime_seconds % 3600) // 60
    uptime_str = f"{days}d {hours}h {minutes}m"
    
    stats_text = (
        "üìä **…¢ ü·¥è ô·¥Ä ü  ô·¥è·¥õ s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs**\n\n"
        f"**üåê ·¥õ·¥è·¥õ·¥Ä ü …¢ Ä·¥è·¥ú·¥òs:** `{total_groups}`\n"
        f"**üë• ·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs:** `{total_users}`\n"
        f"**üí¨ ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ ·¥á…¥·¥Ä ô ü·¥á·¥Ö:** `{chats_enabled}`\n"
        f"**‚è≥ ·¥ú·¥ò·¥õ…™·¥ç·¥á:** `{uptime_str}`"
    )
    
    await message.reply(stats_text)


# /id
@app.on_message(filters.command("id"))
@bot_admin_restrict
async def id_command(client, message):
    user = None
    if message.reply_to_message:
        user = message.reply_to_message.from_user
    elif len(message.command) > 1 and message.entities:
        entity = message.entities[1] if len(message.entities) > 1 else None
        if entity and entity.type == "text_mention":
            user = entity.user
    else:
        user = message.from_user
        
    if user:
        await message.reply(f"**·¥ús·¥á Ä …™·¥Ö:** `{user.id}`\n**·¥Ñ ú·¥Ä·¥õ …™·¥Ö:** `{message.chat.id}`")
    else:
        await message.reply(" Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä ·¥õ·¥Ä…¢ ·¥Ä ·¥ús·¥á Ä ·¥õ·¥è …¢·¥á·¥õ …™·¥Ö.")

# /staff
@app.on_message(filters.command("staff") & filters.group)
@bot_admin_restrict
async def staff_list_command(client, message):
    staff = []
    async for member in client.get_chat_members(message.chat.id):
        if member.status in [ChatMemberStatus.OWNER, ChatMemberStatus.ADMINISTRATOR] and not member.user.is_bot:
            title = member.custom_title if member.custom_title else member.status.name.title()
            staff.append(f"[{member.user.first_name}](tg://user?id={member.user.id}) - *{title}*")
            
    if staff:
        staff_text = "üëë **…¢ Ä·¥è·¥ú·¥ò s·¥õ·¥Ä“ì“ì ·¥ç·¥á·¥ç ô·¥á Äs:**\n" + "\n".join(staff)
    else:
        staff_text = "…¥·¥è s·¥õ·¥Ä“ì“ì ·¥ç·¥á·¥ç ô·¥á Äs “ì·¥è·¥ú…¥·¥Ö."
        
    await message.reply(staff_text)

# /Couples
@app.on_message(filters.command("Couples") & filters.group)
@bot_admin_restrict
async def couples_command(client, message):
    members = []
    async for member in client.get_chat_members(message.chat.id):
        if not member.user.is_bot:
            members.append(member.user.first_name)
    
    if len(members) < 2:
        return await message.reply("…¥·¥á·¥á·¥Ö ·¥Ä·¥õ  ü·¥á·¥Äs·¥õ ·¥õ·¥°·¥è …¥·¥è…¥- ô·¥è·¥õ ·¥ç·¥á·¥ç ô·¥á Äs “ì·¥è Ä ·¥Ä ·¥Ñ·¥è·¥ú·¥ò ü·¥á.")
        
    couple = random.sample(members, 2)
    
    await message.reply(f"**üíñ …¥·¥á·¥° ·¥Ñ·¥è·¥ú·¥ò ü·¥á ·¥Ä ü·¥á·¥á Ä·¥õ! üíñ**\n\n**{couple[0]}** üíò **{couple[1]}**")

# /cute
@app.on_message(filters.command("cute"))
@bot_admin_restrict
async def cute_command(client, message):
    cute_percent = random.randint(10, 100)
    
    await message.reply(
        f" è·¥è·¥ú Ä ·¥Ñ·¥ú·¥õ…¥·¥áss  ü·¥á·¥†·¥á ü …™s **{cute_percent}%**! üòâ",
        reply_markup=support_keyboard()
    )

# /love
@app.on_message(filters.command("love"))
@bot_admin_restrict
async def love_command(client, message):
    if len(message.command) < 2:
        return await message.reply("·¥ò ü·¥á·¥Äs·¥á s·¥ò·¥á·¥Ñ…™“ì è ·¥õ ú·¥á “ì·¥è Ä·¥ç·¥Ä·¥õ: `/love Name1 + Name2`")

    names_text = message.text.split(maxsplit=1)[1]
    
    match = re.search(r"(.+)\s*\+\s*(.+)", names_text)
    
    if not match:
        return await message.reply("…™…¥·¥†·¥Ä ü…™·¥Ö “ì·¥è Ä·¥ç·¥Ä·¥õ. ·¥ús·¥á: `/love Name1 + Name2`")
        
    name1 = match.group(1).strip()
    name2 = match.group(2).strip()
    
    love_percent = random.randint(10, 100)
    
    await message.reply(
        f"**{name1}** üíó **{name2}**\n\n"
        f" ü·¥è·¥†·¥á ·¥ò·¥èss…™ ô…™ ü…™·¥õ è …™s **{love_percent}%**! üòâ",
        reply_markup=support_keyboard()
    )

# --- Games Commands (Telegram's built-in games) ---

@app.on_message(filters.command("dice"))
@bot_admin_restrict
async def dice_command(client, message):
    await client.send_dice(message.chat.id)

@app.on_message(filters.command("jackpot"))
@bot_admin_restrict
async def jackpot_command(client, message):
    await client.send_dice(message.chat.id, emoji="üé∞")

@app.on_message(filters.command("football"))
@bot_admin_restrict
async def football_command(client, message):
    await client.send_dice(message.chat.id, emoji="‚öΩ")

@app.on_message(filters.command("basketball"))
@bot_admin_restrict
async def basketball_command(client, message):
    await client.send_dice(message.chat.id, emoji="üèÄ")

# --- Voice Chat Notifications ---

@app.on_voice_chat_started()
@bot_admin_restrict
async def vc_started_handler(client, message):
    await app.send_message(
        message.chat.id,
        f"**üéôÔ∏è ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö!**\n\n"
        f"**s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö  ô è:** {message.from_user.mention if message.from_user else '·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥'}"
    )

@app.on_voice_chat_ended()
@bot_admin_restrict
async def vc_ended_handler(client, message):
    # Pyrogram doesn't explicitly give 'duration' on voice_chat_ended for older versions,
    # but the logic for a simple notification is here.
    await app.send_message(
        message.chat.id,
        "**üõë ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ ·¥á…¥·¥Ö·¥á·¥Ö!**\n\n"
        "·¥õ ú·¥Ä…¥·¥ãs “ì·¥è Ä ·¥ä·¥è…™…¥…™…¥…¢. ·¥Ñ·¥è·¥ç·¥á  ô·¥Ä·¥Ñ·¥ã s·¥è·¥è…¥!"
    )

@app.on_voice_chat_members_invited()
@bot_admin_restrict
async def vc_member_invited_handler(client, message):
    # Only useful if the bot is the inviter, but good for demonstrating the filter
    invited_users = [user.mention for user in message.users]
    if invited_users:
        await app.send_message(
            message.chat.id,
            f"**üì¢ ·¥ús·¥á Äs …™…¥·¥†…™·¥õ·¥á·¥Ö ·¥õ·¥è ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ:** {', '.join(invited_users)}"
        )


# --- /afk (Away From Keyboard) ---

@app.on_message(filters.command("afk"))
@bot_admin_restrict
async def afk_command(client, message):
    user_id = message.from_user.id
    # Use full name if username is not available
    username_display = f"@{message.from_user.username}" if message.from_user.username else message.from_user.first_name
    
    AFK_USERS[user_id] = time.time()
    
    await message.reply(f" ú·¥á è, **{username_display}**,  è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä“ì·¥ã !!")

@app.on_message(filters.text & filters.group, group=1)
async def afk_detector(client, message):
    user_id = message.from_user.id
    
    # 1. User is Back from AFK
    if user_id in AFK_USERS:
        del AFK_USERS[user_id]
        return await message.reply(" è·¥á·¥Ä ú,  è·¥è·¥ú ·¥Ä Ä·¥á  ô·¥Ä·¥Ñ·¥ã, ·¥è…¥ ü…™…¥·¥á !! üòâ")
    
    # 2. Check if a tagged user is AFK
    if message.entities:
        for entity in message.entities:
            tagged_user_id = None
            
            if entity.type == ChatMemberStatus.TEXT_MENTION:
                tagged_user_id = entity.user.id
            
            # Additional check for username mention, though getting ID directly requires more complex logic.
            # We stick to TEXT_MENTION for reliable ID.
                
            if tagged_user_id and tagged_user_id in AFK_USERS:
                await message.reply("·¥õ ú…™s ·¥ús·¥á Ä …™s ·¥Ä“ì·¥ã !! ‚óâ‚Äø‚óâ")
                return

# --- /ping command ---

@app.on_message(filters.command("ping"))
@bot_admin_restrict
async def ping_command(client, message):
    initial_time = time.time()
    
    # 1. Pinging... Animation
    ping_msg = await message.reply("·¥ò…™…¥…¢…™…¥…¢...s·¥õ·¥Ä Ä·¥á·¥Ö..¬¥ÔΩ•·¥óÔΩ•`")
    await asyncio.sleep(0.5)
    await ping_msg.edit_text("·¥ò…™…¥…¢..·¥ò·¥è…¥…¢ ‚ö°")
    await asyncio.sleep(0.5)
    
    # 2. Calculate Ping and Uptime
    end_time = time.time()
    ping_time = round((end_time - initial_time) * 1000, 2)
    
    # Uptime calculation
    global start_uptime
    uptime_seconds = int(time.time() - start_uptime)
    days = uptime_seconds // (24 * 3600)
    hours = (uptime_seconds % (24 * 3600)) // 3600
    minutes = (uptime_seconds % 3600) // 60
    uptime_str = f"{days}d {hours}h {minutes}m"
    
    # 3. Final Result
    final_text = (
        f"**·¥ò…™…¥…¢** ‚û≥ `{ping_time}ms`\n"
        f"**·¥ú·¥ò·¥õ…™·¥ç·¥á** ‚û≥ `{uptime_str}`"
    )
    
    # Send the final message with the photo
    await ping_msg.delete() 
    
    await message.reply_photo(
        photo=PING_IMG,
        caption=final_text,
        reply_markup=ping_keyboard()
    )


# --- Start Bot ---

if __name__ == "__main__":
    print("Bot is starting...")
    app.run()
